module.exports=[47490,a=>{"use strict";a.s(["getPendingTransactions",()=>p,"getStoredTransactionHistory",()=>l,"recheckPendingTransactions",()=>q,"trackTransaction",()=>o]);var b=a.i(47703),c=a.i(90036),d=a.i(66716),e=a.i(61826);let f=null;function g(){return f||(f=new b.JsonRpcProvider(c.env.NEXT_PUBLIC_RPC_URL)),f}let h=new Map;async function i(a,b=1,c=3e5){let e=g();try{let f=new Promise((b,e)=>{setTimeout(()=>{e(new d.TransactionError(`Transaction confirmation timeout after ${c}ms`,"TIMEOUT",a))},c)}),g=await Promise.race([e.waitForTransaction(a,b),f]);if(!g)throw new d.TransactionError("Transaction receipt not found","UNKNOWN_ERROR",a);if(0===g.status)throw new d.TransactionError("Transaction reverted","REVERTED",a);return g}catch(b){if(b instanceof d.TransactionError)throw b;throw new d.TransactionError(`Failed to wait for transaction: ${b instanceof Error?b.message:"Unknown error"}`,"NETWORK_ERROR",a,b)}}async function j(a){try{let b=g();return await b.getTransactionReceipt(a)}catch(b){throw new d.TransactionError(`Failed to fetch transaction receipt: ${b instanceof Error?b.message:"Unknown error"}`,"NETWORK_ERROR",a,b)}}async function k(a){try{(0,e.addTransaction)(a)}catch(b){throw new d.TransactionError(`Failed to save transaction: ${b instanceof Error?b.message:"Unknown error"}`,"UNKNOWN_ERROR",a.hash,b)}}function l(){return(0,e.getTransactionHistory)()}async function m(a,b,c){try{let d={status:b};if(c){d.blockNumber=c.blockNumber,d.gasUsed=c.gasUsed.toString(),d.gasPrice=c.gasPrice?.toString()||null;let a=g(),b=await a.getBlock(c.blockNumber);b&&(d.timestamp=new Date(1e3*b.timestamp).toISOString())}"failed"===b&&c?.status===0&&(d.error="Transaction reverted"),(0,e.updateTransaction)(a,d)}catch(b){throw new d.TransactionError(`Failed to update transaction status: ${b instanceof Error?b.message:"Unknown error"}`,"UNKNOWN_ERROR",a,b)}}async function n(a){let{hash:b,transaction:c,confirmations:e=1,onConfirmed:f,onFailed:g,onUpdate:k}=a,l=h.get(b);l&&clearInterval(l);let n=!0;(async()=>{try{k?.("pending");let a=await i(b,e);if(!n)return;await m(b,"confirmed",a),k?.("confirmed",a),f?.(a)}catch(c){if(!n)return;await m(b,"failed");let a=c instanceof d.TransactionError?c:new d.TransactionError(c instanceof Error?c.message:"Unknown error","UNKNOWN_ERROR",b);k?.("failed"),g?.(a)}finally{h.delete(b)}})();let o=setInterval(async()=>{if(!n)return void clearInterval(o);try{await j(b)&&clearInterval(o)}catch(a){console.error("Polling error:",a)}},5e3);return h.set(b,o),()=>{n=!1;let a=h.get(b);a&&(clearInterval(a),h.delete(b))}}async function o(a,b,c,d,e="send",f){let g=function(a,b,c,d,e="send"){return{hash:a.hash,from:a.from,to:a.to,value:a.value.toString(),tokenAddress:b,tokenSymbol:c,tokenDecimals:d,status:"pending",type:e,blockNumber:null,timestamp:null,gasUsed:null,gasPrice:a.gasPrice?.toString()||null,chainId:Number(a.chainId)}}(a,b,c,d,e);return await k(g),n({hash:a.hash,transaction:a,confirmations:1,onConfirmed:f?.onConfirmed,onFailed:f?.onFailed,onUpdate:f?.onUpdate})}function p(){return(0,e.getTransactionHistory)().filter(a=>"pending"===a.status)}async function q(){let a=p(),b=0;for(let c of a)try{let a=await j(c.hash);if(a){let d=1===a.status?"confirmed":"failed";await m(c.hash,d,a),b++}}catch(a){console.error(`Failed to recheck transaction ${c.hash}:`,a)}return b}}];

//# sourceMappingURL=src_services_transactionService_ts_bd1cdd90._.js.map