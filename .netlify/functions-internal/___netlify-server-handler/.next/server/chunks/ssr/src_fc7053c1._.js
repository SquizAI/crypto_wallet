module.exports=[77528,a=>{"use strict";a.s(["TOKENS",()=>b,"getAllTokenSymbols",()=>f,"getTokenAddress",()=>c,"getTokenConfig",()=>d,"getTokensForNetwork",()=>e]);let b={USDC:{symbol:"USDC",name:"USD Coin",decimals:6,addresses:{mainnet:"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",sepolia:"0x1c7D4B196Cb0C7B01d743Fbc6116a902379C7238"},logoUrl:"https://cryptologos.cc/logos/usd-coin-usdc-logo.svg",coingeckoId:"usd-coin"},USDT:{symbol:"USDT",name:"Tether USD",decimals:6,addresses:{mainnet:"0xdAC17F958D2ee523a2206206994597C13D831ec7"},logoUrl:"https://cryptologos.cc/logos/tether-usdt-logo.svg",coingeckoId:"tether"},DAI:{symbol:"DAI",name:"Dai Stablecoin",decimals:18,addresses:{mainnet:"0x6B175474E89094C44Da98b954EedeAC495271d0F"},logoUrl:"https://cryptologos.cc/logos/multi-collateral-dai-dai-logo.svg",coingeckoId:"dai"}};function c(a,c){return b[a].addresses[c]}function d(a){return b[a]}function e(a){return Object.values(b).filter(b=>void 0!==b.addresses[a])}function f(){return Object.keys(b)}},59510,a=>{"use strict";a.s(["estimateTransferGas",()=>n,"getAllBalances",()=>l,"getTokenBalance",()=>k,"sendToken",()=>o]);var b=a.i(66585),c=a.i(68533),d=a.i(99959),e=a.i(39271),f=a.i(53765),g=a.i(66716);let h=["function balanceOf(address owner) view returns (uint256)","function decimals() view returns (uint8)","function symbol() view returns (string)","function name() view returns (string)","function transfer(address to, uint256 amount) returns (bool)","function allowance(address owner, address spender) view returns (uint256)","function approve(address spender, uint256 amount) returns (bool)"];function i(a){if(!a||!(0,d.isAddress)(a))throw new g.ContractError(`Invalid Ethereum address: ${a}`,"INVALID_ADDRESS")}async function j(a,b=3,c=1e3){let d=null;for(let e=0;e<b;e++)try{return await a()}catch(a){if(d=a,a instanceof g.ContractError&&"INVALID_ADDRESS"===a.code)throw a;if(e===b-1)break;await new Promise(a=>setTimeout(a,c*Math.pow(2,e)))}throw new g.ContractError(`Network operation failed after ${b} retries: ${d?.message}`,"NETWORK_ERROR",d)}async function k(a,d,f){return i(a),i(d),j(async()=>{try{let g=(0,e.getProvider)(f),i=new b.Contract(a,h,g),[j,k,l,m]=await Promise.all([i.balanceOf(d),i.decimals(),i.symbol(),i.name()]),n=j.toString(),o=(0,c.formatUnits)(j,Number(k));return{tokenAddress:a,symbol:l,name:m,decimals:Number(k),balanceRaw:n,balanceFormatted:o}}catch(a){throw new g.ContractError(`Failed to fetch token balance: ${a instanceof Error?a.message:"Unknown error"}`,"CONTRACT_ERROR",a)}})}async function l(a,b){return i(a),Promise.all((0,f.getNetworkTokens)(b).map(({symbol:c,address:d})=>k(d,a,b).catch(a=>(console.error(`Failed to fetch balance for ${c} on ${b}:`,a),{tokenAddress:d,symbol:c,name:c,decimals:"DAI"===c?18:6,balanceRaw:"0",balanceFormatted:"0.0"}))))}async function m(a){return j(async()=>{try{let b=await (0,e.getNetworkGasPrice)(a);return{maxFeePerGas:b.maxFeePerGas,maxPriorityFeePerGas:b.maxPriorityFeePerGas}}catch(a){throw new g.ContractError(`Failed to fetch gas price: ${a instanceof Error?a.message:"Unknown error"}`,"NETWORK_ERROR",a)}})}async function n(a,d,f,k,l,n){return i(a),i(d),i(f),j(async()=>{try{let g,i=(0,e.getProvider)(n),j=new b.Contract(a,h,i),o=(0,c.parseUnits)(k,l),p=await m(n);try{g=await j.transfer.estimateGas(f,o,{from:d})}catch(a){console.warn("Gas estimation failed, using fallback:",a),g=BigInt(1e5)}let q=g*BigInt(120)/BigInt(100),r=q*p.maxFeePerGas,s=(0,c.formatUnits)(r,"ether");return{gasLimit:q,maxFeePerGas:p.maxFeePerGas,maxPriorityFeePerGas:p.maxPriorityFeePerGas,estimatedCost:r,estimatedCostFormatted:s}}catch(a){throw new g.ContractError(`Failed to estimate gas: ${a instanceof Error?a.message:"Unknown error"}`,"CONTRACT_ERROR",a)}})}async function o(a,d,f,k,l,m){return i(d),i(f),j(async()=>{try{let i=(0,e.getProvider)(m),j=new b.Contract(d,h,i),o=j.connect(a),p=(0,c.parseUnits)(k,l),q=await j.balanceOf(a.address);if(q<p)throw new g.ContractError(`Insufficient token balance. Required: ${k}, Available: ${(0,c.formatUnits)(q,l)}`,"INSUFFICIENT_BALANCE");let r=await n(d,a.address,f,k,l,m);if(await i.getBalance(a.address)<r.estimatedCost)throw new g.ContractError(`Insufficient native currency for gas. Required: ${r.estimatedCostFormatted}`,"INSUFFICIENT_GAS");return await o.transfer(f,p,{maxFeePerGas:r.maxFeePerGas,maxPriorityFeePerGas:r.maxPriorityFeePerGas,gasLimit:r.gasLimit})}catch(a){if(a instanceof g.ContractError)throw a;throw new g.ContractError(`Token transfer failed: ${a instanceof Error?a.message:"Unknown error"}`,"TRANSACTION_FAILED",a)}})}},77423,a=>{"use strict";a.s(["useBalance",()=>g]);var b=a.i(33217),c=a.i(50832),d=a.i(89437),e=a.i(59510),f=a.i(53765);function g(a,g){let{address:h,isUnlocked:i}=(0,c.useWallet)(),{currentNetwork:j}=(0,d.useNetwork)(),k=null,l={};"string"==typeof a?(k=a,l=g||{}):null===a?(k=null,l=g||{}):void 0!==a&&(k=null,l=a);let{refetchInterval:m,enabled:n=!0,queryOptions:o}=l,p=null!==k;return(0,b.useQuery)({queryKey:p?["balance",h,j,k]:["balances",h,j],queryFn:async()=>{if(!h)throw Error("Wallet address not available");if(!p)return await (0,e.getAllBalances)(h,j);{let a=(0,f.getTokenAddress)(j,k);if(!a)throw Error(`Token ${k} not supported on ${j}`);return await (0,e.getTokenBalance)(a,h,j)}},enabled:n&&i&&!!h,refetchInterval:m,staleTime:3e4,gcTime:3e5,refetchOnWindowFocus:!0,...o})}},89147,a=>{"use strict";a.s(["useSendTransaction",()=>p],89147);var b=a.i(72131),c=a.i(12794),d=a.i(18544),e=a.i(33791),f=a.i(42871),g=class extends e.Subscribable{#a;#b=void 0;#c;#d;constructor(a,b){super(),this.#a=a,this.setOptions(b),this.bindMethods(),this.#e()}bindMethods(){this.mutate=this.mutate.bind(this),this.reset=this.reset.bind(this)}setOptions(a){let b=this.options;this.options=this.#a.defaultMutationOptions(a),(0,f.shallowEqualObjects)(this.options,b)||this.#a.getMutationCache().notify({type:"observerOptionsUpdated",mutation:this.#c,observer:this}),b?.mutationKey&&this.options.mutationKey&&(0,f.hashKey)(b.mutationKey)!==(0,f.hashKey)(this.options.mutationKey)?this.reset():this.#c?.state.status==="pending"&&this.#c.setOptions(this.options)}onUnsubscribe(){this.hasListeners()||this.#c?.removeObserver(this)}onMutationUpdate(a){this.#e(),this.#f(a)}getCurrentResult(){return this.#b}reset(){this.#c?.removeObserver(this),this.#c=void 0,this.#e(),this.#f()}mutate(a,b){return this.#d=b,this.#c?.removeObserver(this),this.#c=this.#a.getMutationCache().build(this.#a,this.options),this.#c.addObserver(this),this.#c.execute(a)}#e(){let a=this.#c?.state??(0,c.getDefaultState)();this.#b={...a,isPending:"pending"===a.status,isSuccess:"success"===a.status,isError:"error"===a.status,isIdle:"idle"===a.status,mutate:this.mutate,reset:this.reset}}#f(a){d.notifyManager.batch(()=>{if(this.#d&&this.hasListeners()){let b=this.#b.variables,c=this.#b.context,d={client:this.#a,meta:this.options.meta,mutationKey:this.options.mutationKey};a?.type==="success"?(this.#d.onSuccess?.(a.data,b,c,d),this.#d.onSettled?.(a.data,null,b,c,d)):a?.type==="error"&&(this.#d.onError?.(a.error,b,c,d),this.#d.onSettled?.(void 0,a.error,b,c,d))}this.listeners.forEach(a=>{a(this.#b)})})}},h=a.i(37927),i=a.i(93059),j=a.i(50832),k=a.i(59510),l=a.i(94101),m=a.i(47490),n=a.i(77528),o=a.i(90036);function p(){let{address:a,isUnlocked:c}=(0,j.useWallet)(),e=(0,h.useQueryClient)(),p=o.env.NEXT_PUBLIC_NETWORK;return function(a,c){let e=(0,h.useQueryClient)(void 0),[i]=b.useState(()=>new g(e,a));b.useEffect(()=>{i.setOptions(a)},[i,a]);let j=b.useSyncExternalStore(b.useCallback(a=>i.subscribe(d.notifyManager.batchCalls(a)),[i]),()=>i.getCurrentResult(),()=>i.getCurrentResult()),k=b.useCallback((a,b)=>{i.mutate(a,b).catch(f.noop)},[i]);if(j.error&&(0,f.shouldThrowError)(i.options.throwOnError,[j.error]))throw j.error;return{...j,mutate:k,mutateAsync:j.mutate}}({mutationFn:async({tokenSymbol:b,recipient:d,amount:f,password:g})=>{if(!a)throw Error("Wallet not connected");if(!c)throw Error("Wallet is locked. Please unlock your wallet first.");if(!g)throw Error("Password is required to sign transaction");let h=(0,n.getTokenConfig)(b);if(!h)throw Error(`Token ${b} not found`);let j=(0,n.getTokenAddress)(b,p);if(!j)throw Error(`Token ${b} not supported on ${p}`);let o=await (0,l.unlockWallet)(g),q=new i.Wallet(o.privateKey),r=await (0,k.estimateTransferGas)(j,a,d,f,h.decimals,p),s=await (0,k.getTokenBalance)(j,a,p);if(parseFloat(s.balanceFormatted)<parseFloat(f))throw Error(`Insufficient ${b} balance. Required: ${f}, Available: ${s.balanceFormatted}`);let t=await (0,k.sendToken)(q,j,d,f,h.decimals,p),u=await (0,m.trackTransaction)(t,j,b,h.decimals,"send",{onConfirmed:b=>{console.log("Transaction confirmed:",b.hash),e.invalidateQueries({queryKey:["balance",a]}),e.invalidateQueries({queryKey:["balances",a]}),e.invalidateQueries({queryKey:["transactions",a]})},onFailed:b=>{console.error("Transaction failed:",b),e.invalidateQueries({queryKey:["balance",a]}),e.invalidateQueries({queryKey:["balances",a]}),e.invalidateQueries({queryKey:["transactions",a]})},onUpdate:(a,b)=>{console.log("Transaction status update:",a)}}),v={hash:t.hash,from:a,to:d,value:f,tokenAddress:j,tokenSymbol:b,tokenDecimals:h.decimals,status:"pending",type:"send",blockNumber:null,timestamp:null,gasUsed:null,gasPrice:t.gasPrice?.toString()||null,chainId:Number(t.chainId)};return{hash:t.hash,transaction:v,gasEstimate:r,stopMonitoring:u}},onSuccess:b=>{e.invalidateQueries({queryKey:["balance",a]}),e.invalidateQueries({queryKey:["balances",a]}),e.invalidateQueries({queryKey:["transactions",a]})},onError:a=>{if(console.error("Send transaction error:",a),a instanceof l.WalletError&&"DECRYPTION_FAILED"===a.code)throw Error("Incorrect password")},retry:(a,b)=>!(b.message.includes("Insufficient")||b.message.includes("not supported")||b.message.includes("password"))&&!(b instanceof l.WalletError)&&a<1})}}];

//# sourceMappingURL=src_fc7053c1._.js.map